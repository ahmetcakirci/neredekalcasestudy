services:
  hotel.webapi:
    image: hotel.webapi
    build:
      context: .
      dockerfile: Hotel/src/Hotel.WebApi/Dockerfile
    networks:
      - hotel-network

  hotel.db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: nerdekalnoktacommysqlpass123!.
    ports:
      - '3366:3306'
    volumes:
      - hotel-db:/var/lib/mysql
    networks:
      - hotel-network

  raport.webapi:
    image: raport.webapi
    build:
      context: .
      dockerfile: Raport/src/Raport.WebApi/Dockerfile
      
  raport.db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: neredekalcomuser
      POSTGRES_PASSWORD: nerdekalnoktacompostgrespass123!.
      POSTGRES_DB: nerdekalreportdb
    volumes:
      - report-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - 5431:5432
    networks:
      - report-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "nerdekaluserrabbitmq"
      RABBITMQ_DEFAULT_PASS: "nerdekalpassrabbitmq123!."
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

volumes:
  hotel-db:
  report-db:
  rabbitmq_data:
networks:
  hotel-network:
  report-network: